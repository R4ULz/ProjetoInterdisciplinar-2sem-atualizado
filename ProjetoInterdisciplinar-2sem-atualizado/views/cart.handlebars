<div class="w-full h-fit text-black px-3 py-5 flex justify-center items-center md:mt-12">
  <div class="max-w-screen-2xl w-full h-fit flex flex-col gap-5 items-center">
   <div class="grid grid-cols-1 w-full md:w-[70%] h-fit md:grid-cols-3 md:gap-10 ">
    <div class="flex flex-col gap-5 p-3 h-fit md:h-[400px] md:overflow-auto custom-scrollbar md:border border-red-500 col-span-2 md:shadow-md md:p-5 md:rounded-md">
      <div class="flex items-center gap-2 font-bold">
        <div class="bg-gradient-to-b from-orange-400 to-red-600 w-1 h-5"></div>
        <h2>Meu <span class="text-orange-500">carrinho</span></h2>
      </div>
      <div class="flex flex-col items-center gap-3 w-full">
        {{#each produtos}}
        <div class="flex items-center justify-between p-2 gap-2 w-full border border-gray-50 shadow-md rounded-md">
            <img src="/images/{{imagem}}.png" class="w-16 h-16" alt="">
          <div class="flex justify-between items-center w-full">
            <div class="w-fit h-fit flex flex-col gap-3">
              <p class="text-sm">{{nome}}</p>
              <span class="text-teal-500 text-sm" id="price_{{ProdutoId}}">R$: {{valor}},00</span>
            </div>
            <div class="flex flex-col gap-3">
              <button class="self-end delete" data-produto-id="{{ProdutoId}}"><i class="fa-solid fa-trash text-red-500"></i></button>
              <div class="border border-yellow-500 rounded-full flex jusitfy-center items-center text-sm">
                <button data-produto-id="{{ProdutoId}}" class="md:w-8 w-5 flex items-center justify-center decrease" >-</button>
                <span class="md:w-8 w-4 border-r border-l border-yellow-500 text-teal-500 flex items-center justify-center quantity_{{ProdutoId}}">{{quantidade}}</span>
                <button data-produto-id="{{ProdutoId}}" class="md:w-8 w-5 flex items-center justify-center increase" >+</button>
              </div>
            </div>
          </div>
        </div>
        {{else}}
        <p>nenhum produto no carrinho</p>
        {{/each}}
            </div>
          </div>
          <div class="flex flex-col gap-3 w-full md:w-72">
      <div class="flex flex-col gap-5 items-center justify-center p-5 rounded-md shadow-md border-gray-50 w-full h-fit"> 
        <div class="flex items-center gap-2 w-full font-bold">
          <div class="bg-gradient-to-b from-orange-400 to-red-600 w-1 h-5"></div>
                <h2>Você <span class="text-orange-500">prefere</span></h2>
        </div>
      <div class="flex justify-center items-center gap-11 ">
        <div class=" border border-red-500 w-max h-max p-3 rounded-md ">
          <img src="/images/moto.png" class="w-12" alt="">
          <p class="text-sm">Delivery</p>
        </div>
        <div class="">
          <img src="/images/retirar.png" class="w-8">
          <p class="text-sm">Retirar</p>
        </div>
      </div>
      </div>
      <div class="flex flex-col items-center justify-center p-5 rounded-md shadow-md border-gray-50 w-full h-[60%]">
        <div class="flex items-center gap-2 w-full">
          <div class="bg-gradient-to-b from-orange-400 to-red-600 w-1 h-5"></div>
          <h2 class="font-bold">Pagamento</h2>
        </div>
        <div class="flex flex-col w-full gap-1 p-3">
          <div class="flex items-center justify-between gap-10 text-[10px] text-zinc-500">
            <p>Subtotal</p>
            <p id="subtotal">{{formatCurrency subtotal}}</p>
          </div>
          <div class="flex items-center justify-between gap-10 text-[10px] text-zinc-500">
            <p>Frete</p>
            <p>03,00</p>
          </div>
          <div class="flex items-center justify-between gap-10 text-[10px] text-zinc-500">
            <p>Descontos</p>
            <p>99,99</p>
          </div>
          <div class="border border-yellow-500 w-full"></div>
          <div class="flex items-center justify-between text-[14px]">
            <p>Total a pagar:</p>
            <p>R$:50,00</p>
          </div>
        </div>
        <button id="confirmarPedido" class="px-8 py-2 bg-red-500 text-white rounded-full">Pedir agora!</button>

      </div>
    </div>
   </div>
  </div> 
</div>
<script>
  document.addEventListener('DOMContentLoaded', function () {
  const decreaseButtons = document.querySelectorAll('.decrease');
  const increaseButtons = document.querySelectorAll('.increase');
  const deleteButtons = document.querySelectorAll('.delete');

  decreaseButtons.forEach(button => {
    button.addEventListener('click', function () {
      const produtoId = this.dataset.produtoId;
      updateQuantity(produtoId, -1);
    });
  });

  increaseButtons.forEach(button => {
    button.addEventListener('click', function () {
      const produtoId = this.dataset.produtoId;
      updateQuantity(produtoId, 1);
    });
  });

  deleteButtons.forEach(button => {
    button.addEventListener('click', function () {
      const produtoId = this.dataset.produtoId;
      deleteProduct(produtoId);
    });
  });
});

document.addEventListener('DOMContentLoaded', function () {
  const carrinhoContainer = document.querySelector('.flex.flex-col.items-center.gap-3.w-full'); // Seletor para o container onde os itens devem ser exibidos
  const carrinho = JSON.parse(localStorage.getItem('carrinho')) || [];

  carrinho.forEach(produto => {
    const produtoDiv = document.createElement('div');
    produtoDiv.classList.add('flex', 'items-center', 'justify-between', 'p-2', 'gap-2', 'w-full', 'border', 'border-gray-50', 'shadow-md', 'rounded-md');
    produtoDiv.innerHTML = `
      <img src="/images/${produto.imagem}.png" alt="${produto.nome}" class="w-16 h-16">
      <div class="flex justify-between items-center w-full">
        <div class="w-fit h-fit flex flex-col gap-3">
          <p class="text-sm">${produto.nome}</p>
          <span class="text-teal-500 text-sm">R$: ${produto.valor.toFixed(2)}</span>
        </div>
        <div class="flex flex-col gap-3">
          <button class="self-end delete" data-produto-id="${produto.produtoId}"><i class="fa-solid fa-trash text-red-500"></i></button>
          <div class="border border-yellow-500 rounded-full flex justify-center items-center text-sm">
            <button data-produto-id="${produto.produtoId}" class="md:w-8 w-5 flex items-center justify-center decrease">-</button>
            <span class="md:w-8 w-4 border-r border-l border-yellow-500 text-teal-500 flex items-center justify-center">${produto.quantidade}</span>
            <button data-produto-id="${produto.produtoId}" class="md:w-8 w-5 flex items-center justify-center increase">+</button>
          </div>
        </div>
      </div>
    `;
    carrinhoContainer.appendChild(produtoDiv);
  });
});


function updateQuantity(produtoId, change) {
    const quantityDisplays = document.querySelectorAll(`.quantity_${produtoId}`);
    if (quantityDisplays.length === 0) {
        console.error(`Elemento não encontrado para ProdutoId: ${produtoId}`);
        return; // Saia da função se não encontrar o elemento
    }

    let quantityDisplay = quantityDisplays[0];
    let currentQuantity = parseInt(quantityDisplay.textContent);

    // Se a quantidade atual é 1 e a mudança é negativa, não permita a mudança
    if (currentQuantity === 1 && change < 0) {
        console.log("Quantidade mínima alcançada, não pode diminuir mais.");
        alert("Quantidade mínima alcançada, não pode diminuir mais.");
        return; // Impede que a quantidade seja reduzida abaixo de 1
    }

    let newQuantity = currentQuantity + change;
    newQuantity = Math.max(1, newQuantity); // Assegura que a quantidade é pelo menos 1

    // Atualiza a quantidade no display
    quantityDisplay.textContent = newQuantity;

    const priceDisplay = document.querySelector(`#price_${produtoId}`);
    if (!priceDisplay) {
        console.error(`Elemento de preço não encontrado para ProdutoId: ${produtoId}`);
        return;
    }
    const unitPrice = parseFloat(priceDisplay.textContent.replace(/[^0-9\.-]+/g,"")); // Garante que o texto seja convertido para número

    // Atualizar subtotal
    const subtotalDisplay = document.querySelector('#subtotal');
    let currentSubtotal = parseFloat(subtotalDisplay.textContent.replace(/[^0-9\.-]+/g,""));
    if(isNaN(currentSubtotal) || isNaN(unitPrice)) {
        console.error('Erro ao calcular subtotal: valores inválidos');
        return;
    }
    currentSubtotal += change * unitPrice;
    subtotalDisplay.textContent = currentSubtotal;
    
    fetch(`/carrinho/update/${produtoId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ quantity: newQuantity })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}


function deleteProduct(produtoId) {
    // Enviar a solicitação de delete para o servidor
    fetch(`/carrinho/delete/${produtoId}`, {
        method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
        console.log('Product deleted:', data);
        // Certifique-se de remover o elemento do DOM
        const productElement = document.querySelector(`#product_${produtoId}`);
        if (productElement) {
            productElement.remove();
        } else {
            console.error('Elemento do produto não encontrado no DOM:', produtoId);
        }
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}

document.getElementById('confirmarPedido').addEventListener('click', function() {
  const carrinho = JSON.parse(localStorage.getItem('carrinho'));
  fetch('/confirmarPedido', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ carrinho: carrinho })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data.message);
    if (data.success) {
      localStorage.removeItem('carrinho'); // Limpa o carrinho no localStorage
      alert('Pedido confirmado com sucesso!');
    }
  })
  .catch(error => {
    console.error('Erro:', error);
  });
});

</script>
        </div>
      </div>
    </div>
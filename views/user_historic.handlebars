<div class="w-full h-fit text-black px-3 py-5 flex justify-center items-center md:mt-12">
  <div class="max-w-screen-2xl w-full h-fit flex flex-col gap-5">
    <div class="grid grid-cols-1 md:grid-cols-4 items-start ">
      <ul class="flex flex-col gap-4 pl-5 font-semibold col-span-1 text-lg">
        <a href="/profile" class="hover:text-red-500 ease-in-out duration-300 w-fit">
          <li class="relative">Informações pessoais </li>
        </a>
        <a href="/profile/pedidos" class="hover:text-red-500 ease-in-out duration-300 w-fit flex items center">

          <li class="relative">Histórico de pedido <div
              class="bg-gradient-to-b from-orange-400 to-red-600 w-1 h-4 absolute top-[5px] -left-3"></div>
          </li>
        </a>
        <a href="/alterar-senha" class="hover:text-red-500 ease-in-out duration-300 w-fit">
          <li>Alterar senha</li>
        </a>
        <a href="/logout" class="hover:text-red-500 ease-in-out duration-300 w-fit">
          <li><button class="border border-red-500 rounded-full px-6 py-1 text-red-500 font-semibold">Sair</button></li>
        </a>
      </ul>
      <section
        class="flex flex-col mt-8 p-5 md:w-[80%] h-[500px] overflow-auto col-span-3 md:shadow-md bg-white md:shadow-inner md:mt-0">
        <div class="flex items-center gap-1">
          <div class="bg-gradient-to-b from-orange-400 to-red-600 w-1 h-4"></div>
          <h2>Histórico de <span>pedidos</span></h2>
        </div>
        <div class="h-[900px] w-full flex justify-center items-center p-4">
          <div class="h-fit w-full flex justify-center">
            <div class="w-full bg-gray-100 flex gap-6">
              <div id="pedidosContainer" class="flex flex-col gap-5 w-full p-2 h-fit">
              </div>
            </div>
          </div>
        </div>
    </div>
    </section>
  </div>
</div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
  fetch('/api/meus-pedidos', { method: 'GET' })
    .then(response => response.json())
    .then(data => {
      console.log("Dados recebidos:", data);
      if (!data.success || !Array.isArray(data.pedidos)) {
        console.error('Esperava-se um array, recebido:', data);
        return; // Pare a execução se não for um array
      }

      const container = document.getElementById('pedidosContainer');
      data.pedidos.forEach(pedido => {
        console.log("Pedido:", pedido);
        const total = Number(pedido.Total); // Usando o valor total armazenado no banco
        const pedidoElement = document.createElement('div');
        pedidoElement.className = 'flex justify-between items-center bg-gray-50 p-2 rounded-lg shadow';

        let itensHtml = '';

        if (Array.isArray(pedido.pedido_produtos)) {
          pedido.pedido_produtos.forEach(item => {
            console.log("Item do pedido:", item);
            if (item.Produto) {
              const precoUnitario = Number(item.PrecoUnitario);
              const quantidade = Number(item.Quantidade);
              if (!isNaN(precoUnitario) && !isNaN(quantidade)) {
                itensHtml += `
                  <p>Produto: ${item.Produto.nome}</p>
                  <p>Quantidade: ${quantidade}</p>
                  <p>Preço unitário: R$ ${precoUnitario.toFixed(2)}</p>
                  <hr>
                `;
              } else {
                console.error('Preço unitário ou quantidade inválido no item:', item);
              }
            } else {
              console.error('Produto não encontrado no item:', item);
            }
          });
        } else {
          console.error('pedido.pedido_produtos não é um array:', pedido.pedido_produtos);
          itensHtml = '<p>Nenhum item encontrado para este pedido.</p>';
        }

        console.log("HTML dos itens:", itensHtml);
        pedidoElement.innerHTML = `
          <div class="flex gap-5 md:gap-8 justify-between md:items-center w-full md:flex-row flex-col md:text-sm text-xs">
            <div class="flex flex-col gap-2 md:gap-4">
              <p>ID do pedido: #${pedido.PedidoId}</p>
              <p class="text-xs">HORA: ${new Date(pedido.createdAt).toLocaleTimeString()}</p>
              <p class="text-xs">DATA: ${new Date(pedido.createdAt).toLocaleDateString()}</p>
            </div>
            <div class="flex flex-col gap-1 md:gap-5">
              <div class="flex gap-2 items-center">
                <p>Status: ${pedido.Status}</p>
                <div class="w-[10px] h-[10px] bg-orange-500 rounded-full flex" style="background-color: ${pedido.statusColor};"></div>
              </div>
              <p>Total do pedido: R$ ${total.toFixed(2)}</p>
            </div>
            <div class="w-full md:w-[180px] h-[100px] md:h-[100px] overflow-x-auto">
              ${itensHtml}
            </div>
          </div>
        `;
        container.appendChild(pedidoElement);
      });
    })
    .catch(error => console.error('Erro ao buscar pedidos:', error));
});

</script>